AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy EC2, ALB, DocumentDB, and Route 53 for Jaimaxcoin

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC ID
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: At least two subnets for ALB and DocumentDB
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and custom HTTP ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 95
          CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB HTTP/HTTPS traffic
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: ami-05fa46471b02db0ce
      KeyName: !Ref KeyPairName
      SubnetId: !Select [0, !Ref SubnetIds]
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y nginx
          cat <<EOF > /etc/nginx/conf.d/jaimaxcoin.conf
          server {
              listen 80;
              server_name jaimaxcoin.awsdev.site;
              location / {
                  root /usr/share/nginx/html;
                  index index.html;
              }
          }
          server {
              listen 90;
              server_name api.awsdev.site;
              location / {
                  root /usr/share/nginx/html;
                  index index.html;
              }
          }
          server {
              listen 95;
              server_name admin.awsdev.site;
              location / {
                  root /usr/share/nginx/html;
                  index index.html;
              }
          }
          EOF
          echo "<html><body><h1>Welcome to Jaimaxcoin Site!</h1></body></html>" > /usr/share/nginx/html/index.html
          systemctl enable nginx
          systemctl start nginx

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: JaimaxcoinALB
      Scheme: internet-facing
      Type: application
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup

  JaimaxcoinTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tg-jaimaxcoin
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckPath: /
      Targets:
        - Id: !Ref EC2Instance

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref JaimaxcoinTargetGroup

  ListenerRuleAdmin:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 1
      Conditions:
        - Field: host-header
          Values: ["admin.awsdev.site"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref JaimaxcoinTargetGroup

  ListenerRuleAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 2
      Conditions:
        - Field: host-header
          Values: ["api.awsdev.site"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref JaimaxcoinTargetGroup

  ListenerRuleMain:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 3
      Conditions:
        - Field: host-header
          Values: ["jaimaxcoin.awsdev.site"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref JaimaxcoinTargetGroup

  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2 to access DocumentDB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for DocumentDB
      SubnetIds: !Ref SubnetIds

  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: docdb-jaimax
      MasterUsername: adminuser
      MasterUserPassword: securepassword  # Recommend storing this in Secrets Manager
      VpcSecurityGroupIds:
        - !Ref DocumentDBSecurityGroup
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup
      Port: 27017
      EngineVersion: "4.0"
      StorageEncrypted: true
      BackupRetentionPeriod: 7

  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: awsdev.site

  Route53RecordAdmin:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: admin.awsdev.site
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  Route53RecordAPI:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: api.awsdev.site
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  Route53RecordMain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: jaimaxcoin.awsdev.site
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

Outputs:
  ALBDNS:
    Description: ALB DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  EC2PublicIP:
    Description: Public IP of EC2
    Value: !GetAtt EC2Instance.PublicIp

  DocumentDBEndpoint:
    Description: DocumentDB Cluster Endpoint
    Value: !GetAtt DocumentDBCluster.Endpoint
